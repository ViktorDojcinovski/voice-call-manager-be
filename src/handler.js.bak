const TwilioClient = require("twilio");
const VoiceResponse = require("twilio").twiml.VoiceResponse;
const AccessToken = require("twilio").jwt.AccessToken;
const VoiceGrant = AccessToken.VoiceGrant;
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const User = require("./models/user");
// const Password = require("./services/password");

const nameGenerator = require("../name_generator");
const config = require("../config");

let identity;
let activeCalls;

const client = TwilioClient(config.accountSid, config.authToken);

exports.tokenGenerator = function tokenGenerator() {
  identity = "webrtc_user";

  const accessToken = new AccessToken(
    config.accountSid,
    config.apiKey,
    config.apiSecret,
  );
  accessToken.identity = identity;
  const grant = new VoiceGrant({
    outgoingApplicationSid: config.twimlAppSid,
    incomingAllow: true,
  });
  accessToken.addGrant(grant);

  // Include identity and token in a JSON response
  return {
    identity: identity,
    token: accessToken.toJwt(),
  };
};

exports.callCampaign = async function callCampaign(requestBody) {
  console.log("body: ", requestBody);
  const { phoneNumbers } = requestBody;

  activeCalls = [];

  try {
    const callerIds = config.callerIds.split(",");

    phoneNumbers.map(async (phoneNumber, i) => {
      const call = await client.calls.create({
        url: "https://ce1d-92-53-24-142.ngrok-free.app/status-callback",
        to: phoneNumber,
        from: callerIds[i],
      });

      activeCalls.push({ phoneNumber, callSid: call.sid });
    });
  } catch (error) {
    console.log(error);
  }
};

exports.statusCallback = function statusCallback(requestBody) {
  const { CallStatus, CallSid } = requestBody;

  if (CallStatus === "in-progress") {
    const twiml = new VoiceResponse();
    const dial = twiml.dial();

    dial.client("webrtc_user");

    activeCalls.forEach(async ({ callSid }) => {
      if (callSid !== CallSid) {
        try {
          await client.calls(callSid).update({ status: "completed" });
        } catch (error) {
          console.error(`Error ending call ${callSid}: `, error);
        }
      }
    });

    return twiml.toString();
  }
};

exports.stopCampaign = async function stopCampaign() {
  for (let { callSid } of activeCalls) {
    await client.calls(callSid).update({ status: "completed" });
  }
  activeCalls = [];
};

exports.voiceResponse = function voiceResponse(requestBody) {
  const toNumberOrClientName = requestBody.To;
  const callerId = config.callerId;
  let twiml = new VoiceResponse();

  // If the request to the /voice endpoint is TO your Twilio Number,
  // then it is an incoming call towards your Twilio.Device.
  if (toNumberOrClientName == callerId) {
    let dial = twiml.dial();

    // This will connect the caller with your Twilio.Device/client
    dial.client(identity);
  } else if (requestBody.To) {
    // This is an outgoing call

    // set the callerId
    let dial = twiml.dial({ callerId });

    // Check if the 'To' parameter is a Phone Number or Client Name
    // in order to use the appropriate TwiML noun
    const attr = isAValidPhoneNumber(toNumberOrClientName)
      ? "number"
      : "client";
    dial[attr]({}, toNumberOrClientName);
  } else {
    twiml.say("Thanks for calling!");
  }

  return twiml.toString();
};

exports.login = async function login(requestBody) {
  const { email, password } = requestBody;
  const user = await User.findOne({ email });

  if (!user) return { error: "Invalid credentials" };

  const isMatch = await Password.compare(user.password, password);

  if (!isMatch) return { error: "Invalid credentials" };

  const token = jwt.sign(
    { id: user.id, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: process.env.TOKEN_EXPIRY },
  );

  return { token, role: user.role };
};

/**
 * Checks if the given value is valid as phone number
 * @param {Number|String} number
 * @return {Boolean}
 */
function isAValidPhoneNumber(number) {
  return /^[\d\+\-\(\) ]+$/.test(number);
}
